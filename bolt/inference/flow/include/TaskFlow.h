// Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
/* DO NOT EDIT THIS FILE - it is machine generated */

#ifndef _Included_TaskFlow
#define _Included_TaskFlow
#ifdef __cplusplus
extern "C" {
#endif

#include "jni_header.h"

/*
 * Class:     TaskFlow
 * Method:    taskEnqueue
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL BOLT_JNI_PREFIX(TaskFlow_taskEnqueue)(JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     TaskFlow
 * Method:    tasksDequeue
 * Signature: (JZ)[J
 */
JNIEXPORT jlongArray JNICALL BOLT_JNI_PREFIX(TaskFlow_tasksDequeue)(
    JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     TaskFlow
 * Method:    getTaskResult
 * Signature: (JI[Ljava/lang/String;)LBoltResult;
 */
JNIEXPORT jobject JNICALL BOLT_JNI_PREFIX(TaskFlow_getTaskResult)(
    JNIEnv *, jobject, jlong, jint, jobjectArray, jstring);

/*
 * Class:     TaskFlow
 * Method:    createFlow
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)J
 */
JNIEXPORT jlong JNICALL BOLT_JNI_PREFIX(TaskFlow_createFlow)(
    JNIEnv *, jobject, jstring, jstring, jstring, jint, jboolean);

/*
 * Class:     TaskFlow
 * Method:    createTask
 * Signature: (Ljava/lang/String;I[I[I[I[I[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[[FI[I[I[I[I[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL BOLT_JNI_PREFIX(TaskFlow_createTask)(JNIEnv *,
    jobject,
    jstring,
    jint,
    jintArray,
    jintArray,
    jintArray,
    jintArray,
    jobjectArray,
    jobjectArray,
    jobjectArray,
    jobjectArray,
    jint,
    jintArray,
    jintArray,
    jintArray,
    jintArray,
    jobjectArray,
    jobjectArray,
    jobjectArray);

/*
 * Class:     TaskFlow
 * Method:    taskFlowRegisterFunction
 * Signature: (Ljava/lang/String;J)I
 */
JNIEXPORT jint JNICALL BOLT_JNI_PREFIX(TaskFlow_taskFlowRegisterFunction)(
    JNIEnv *, jobject, jstring, jlong);

/*
 * Class:     TaskFlow
 * Method:    destroyFlow
 * Signature: (J)V
 */
JNIEXPORT void JNICALL BOLT_JNI_PREFIX(TaskFlow_destroyFlow)(JNIEnv *, jobject, jlong);

/*
 * Class:     TaskFlow
 * Method:    destroyTask
 * Signature: (J)V
 */
JNIEXPORT void JNICALL BOLT_JNI_PREFIX(TaskFlow_destroyTask)(JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
